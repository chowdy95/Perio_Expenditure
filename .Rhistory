# clean invalid/degenerate values
shape[!is.finite(shape) | shape <= 0] <- NA_real_
rate[!is.finite(rate) | rate <= 0]   <- NA_real_
tibble(
!!paste0(proc, "_shape") := shape,
!!paste0(proc, "_rate")  := rate
)
})
)
write_csv(final_df, "./data/combined_country_input_for_analysis.csv") # for future data analysis
final_df_clean <- final_df %>%
dplyr::select(
-iso3c,
-Dent_exp_usd,
-Dent_exppc_usd,
-(GDP_per_capita_PPP_2021:gdp_ppp_lower),
-(Prophy:Maintenance_perio_sd)
)
mean_vec <- .[[proc]]                     # absolute mean
final_df <- final_df %>%
# Step 1: overwrite means with absolute values
mutate(across(all_of(procedures), ~ abs(.x))) %>%
# Step 2: create *_shape and *_rate columns for each procedure
bind_cols(
map_dfc(procedures, function(proc) {
mean_vec <- .[[proc]]                     # absolute mean
sd_vec   <- abs(.[[paste0(proc, "_sd")]]) # absolute sd
var_vec  <- sd_vec^2
denom    <- ifelse(var_vec <= 0 | is.na(var_vec), NA_real_, var_vec)
shape <- (mean_vec^2) / denom
rate  <- mean_vec / denom
# clean invalid/degenerate values
shape[!is.finite(shape) | shape <= 0] <- NA_real_
rate[!is.finite(rate) | rate <= 0]   <- NA_real_
tibble(
!!paste0(proc, "_shape") := shape,
!!paste0(proc, "_rate")  := rate
)
})
)
final_df <- final_df %>%
# Step 1: overwrite means with absolute values
mutate(across(all_of(procedures), ~ abs(.x))) %>%
# Step 2: compute shape and rate using pmap
bind_cols(
pmap_dfc(
list(
!!!set_names(final_df[procedures], procedures),
!!!set_names(lapply(procedures, function(x) abs(final_df[[paste0(x, "_sd")]])),
paste0(procedures, "_sd"))
),
function(...) {
vals <- list(...)
new_cols <- map(procedures, function(proc) {
mean_vec <- vals[[proc]]
sd_vec   <- vals[[paste0(proc, "_sd")]]
var_vec  <- sd_vec^2
denom    <- ifelse(var_vec <= 0 | is.na(var_vec), NA_real_, var_vec)
shape <- (mean_vec^2) / denom
rate  <- mean_vec / denom
# safety
shape[!is.finite(shape) | shape <= 0] <- NA_real_
rate[!is.finite(rate) | rate <= 0]   <- NA_real_
tibble(
!!paste0(proc, "_shape") := shape,
!!paste0(proc, "_rate")  := rate
)
})
bind_cols(new_cols)
}
)
)
# Overwrite means with absolute values
final_df <- final_df %>%
mutate(across(all_of(procedures), ~ abs(.x)))
# Overwrite means with absolute values
final_df <- final_df %>%
mutate(across(all_of(procedures), ~ abs(.x)))
# Compute *_shape and *_rate columns
for (proc in procedures) {
mean_vec <- final_df[[proc]]
sd_vec   <- abs(final_df[[paste0(proc, "_sd")]])
var_vec  <- sd_vec^2
denom    <- ifelse(var_vec <= 0 | is.na(var_vec), NA_real_, var_vec)
final_df[[paste0(proc, "_shape")]] <- (mean_vec^2) / denom
final_df[[paste0(proc, "_rate")]]  <- mean_vec / denom
# safety for invalid values
final_df[[paste0(proc, "_shape")]][!is.finite(final_df[[paste0(proc, "_shape")]]) |
final_df[[paste0(proc, "_shape")]] <= 0] <- NA_real_
final_df[[paste0(proc, "_rate")]][!is.finite(final_df[[paste0(proc, "_rate")]]) |
final_df[[paste0(proc, "_rate")]] <= 0] <- NA_real_
}
shape <- (mean_vec^2) / denom
mean_vec <- .x
final_df <- final_df %>%
mutate(across(all_of(procedures), ~ abs(.x))) %>%
mutate(
across(all_of(procedures),
~ {
mean_vec <- .x
sd_vec   <- abs(get(paste0(cur_column(), "_sd")))
var_vec  <- sd_vec^2
denom    <- ifelse(var_vec <= 0 | is.na(var_vec), NA_real_, var_vec)
shape <- (mean_vec^2) / denom
rate  <- mean_vec / denom
# safety for invalid values
shape[!is.finite(shape) | shape <= 0] <- NA_real_
rate[!is.finite(rate) | rate <= 0]   <- NA_real_
# return a two-column tibble for binding
tibble(
!!paste0(cur_column(), "_shape") := shape,
!!paste0(cur_column(), "_rate")  := rate
)
},
.names = "{.col}_gamma")
) %>%
tidyr::unnest(cols = ends_with("_gamma"))
final_df <- final_df %>%
mutate(across(all_of(procedures), ~ abs(.x))) %>%
mutate(
across(all_of(procedures),
~ {
mean_vec <- .x
sd_vec   <- abs(get(paste0(cur_column(), "_sd")))
var_vec  <- sd_vec^2
denom    <- ifelse(var_vec <= 0 | is.na(var_vec), NA_real_, var_vec)
shape <- (mean_vec^2) / denom
rate  <- mean_vec / denom
# safety for invalid values
shape[!is.finite(shape) | shape <= 0] <- NA_real_
rate[!is.finite(rate) | rate <= 0]   <- NA_real_
# return a two-column tibble for binding
tibble(
!!paste0(cur_column(), "_shape") := shape,
!!paste0(cur_column(), "_rate")  := rate
)
},
.names = "{.col}_gamma")
) %>%
tidyr::unnest(cols = ends_with("_gamma"))
for (proc in procedures) {
mean_vec <- final_df[[proc]]
sd_vec   <- abs(final_df[[paste0(proc, "_sd")]])
var_vec  <- sd_vec^2
denom    <- ifelse(var_vec <= 0 | is.na(var_vec), NA_real_, var_vec)
final_df[[paste0(proc, "_shape")]] <- (mean_vec^2) / denom
final_df[[paste0(proc, "_rate")]]  <- mean_vec / denom
# safety
final_df[[paste0(proc, "_shape")]][!is.finite(final_df[[paste0(proc, "_shape")]]) |
final_df[[paste0(proc, "_shape")]] <= 0] <- NA_real_
final_df[[paste0(proc, "_rate")]][!is.finite(final_df[[paste0(proc, "_rate")]]) |
final_df[[paste0(proc, "_rate")]] <= 0] <- NA_real_
}
View(final_df)
# Step 2: compute *_shape and *_rate columns explicitly
for (proc in procedures) {
mean_vec <- final_df[[proc]]
sd_vec   <- abs(final_df[[paste0(proc, "_sd")]])
var_vec  <- sd_vec^2
denom    <- ifelse(var_vec <= 0 | is.na(var_vec), NA_real_, var_vec)
final_df[[paste0(proc, "_shape")]] <- (mean_vec^2) / denom
final_df[[paste0(proc, "_rate")]]  <- mean_vec / denom
# safety for invalid values
final_df[[paste0(proc, "_shape")]][!is.finite(final_df[[paste0(proc, "_shape")]]) |
final_df[[paste0(proc, "_shape")]] <= 0] <- NA_real_
final_df[[paste0(proc, "_rate")]][!is.finite(final_df[[paste0(proc, "_rate")]]) |
final_df[[paste0(proc, "_rate")]] <= 0] <- NA_real_
}
View(final_df)
base_df <- read_csv("./data/monte_carlo_input_from_rms.csv", col_types = cols())
base_df_dent_exp <- base_df %>%
select(iso3c, Dent_exp_usd)
overwrite_df <- read_csv("./data/country_input.csv", col_types = cols()) %>%
rename(iso3c = iso3, Dent_exppc_usd = "Dental Expenditure Per Capita") %>%
left_join(base_df_dent_exp)
known_country_list <- overwrite_df %>%
pull(iso3c)
final_df <- base_df %>%
filter(!iso3c %in% known_country_list) %>%
bind_rows(overwrite_df) %>%
select(-mu_log_prophy, -sigma_log_prophy, -log_GDP, -prophy_var, -Conversion)
View(final_df)
# Procedure names of interest
procedures <- c(
"Consult_simple", "Consult_perio", "OPG", "PA", "RootDeb", "OHI",
"Extraction", "OFD", "GTR", "Single_implant", "Implant_surgery",
"Full_fixed", "Denture", "Denture_repair", "Maintenance_simp",
"Maintenance_perio"
)
final_df <- final_df %>%
mutate(across(all_of(procedures), ~ abs(.x)))
# Step 2: compute *_shape and *_rate columns explicitly
for (proc in procedures) {
mean_vec <- final_df[[proc]]
sd_vec   <- abs(final_df[[paste0(proc, "_sd")]])
var_vec  <- sd_vec^2
denom    <- ifelse(var_vec <= 0 | is.na(var_vec), NA_real_, var_vec)
final_df[[paste0(proc, "_shape")]] <- (mean_vec^2) / denom
final_df[[paste0(proc, "_rate")]]  <- mean_vec / denom
# safety for invalid values
final_df[[paste0(proc, "_shape")]][!is.finite(final_df[[paste0(proc, "_shape")]]) |
final_df[[paste0(proc, "_shape")]] <= 0] <- NA_real_
final_df[[paste0(proc, "_rate")]][!is.finite(final_df[[paste0(proc, "_rate")]]) |
final_df[[paste0(proc, "_rate")]] <= 0] <- NA_real_
}
write_csv(final_df, "./data/combined_country_input_for_analysis.csv") # for future data analysis
final_df_clean <- final_df %>%
dplyr::select(
-iso3c,
-Dent_exp_usd,
-Dent_exppc_usd,
-(GDP_per_capita_PPP_2021:gdp_ppp_lower),
-(Prophy:Maintenance_perio_sd)
)
final_df_clean <- final_df %>%
dplyr::select(
-iso3c,
-Dent_exp_usd,
-Dent_exppc_usd,
-(GDP_per_capita_PPP_2021:gdp_ppp_lower),
-(Prophy:Maintenance_perio_sd)
)
# Save
write_csv(final_df_clean, "./data/combined_country_input.csv")
# ==============================================================================
# Creating datasets for each year, joining by iso3c, and adjusting procedure costs for medical inflation
# ==============================================================================
existing_input <- read_csv("data/combined_country_input.csv")
existing_input_stripped <- existing_input %>%
select(!(Pop:Perio_prev_sd)) %>%
mutate(Country = ifelse(Country == "Micronesia",             # Micronesia is the only country that is not captured by the countrycodes package
"Micronesia (Federated States of)",
Country),
iso3c = countrycode(Country, origin = "country.name", destination = "iso3c"))
# Prepare 2025 file, joining by iso3c
combined_country_input_2025 <-  joined_forecast %>%
filter(year_id ==2025) %>%
select(!(year_id)) %>%
right_join(existing_input_stripped) %>%
write_csv("data/combined_country_input_2025.csv")
# ==============================================================================
# Extracting data from IHME population forecast, perio and edentulism prevalence data
# ==============================================================================
library(tidyverse)
library(countrycode)
population_forecast <- read_csv("data/IHME_population_forecast.csv") %>%     # Data taken from IHME (https://ghdx.healthdata.org/record/ihme-data/global-population-forecasts-2017-2100)
filter(scenario == 0, year_id %in% c(2025, 2030, 2035, 2040, 2045, 2050)) %>%
select(starts_with(c("location", "year", "measure", "val","upper","lower"))) %>%
mutate(iso3c = countrycode(location_name, origin = "country.name", destination = "iso3c")) %>%   #matching with ISO code for country names
filter(!is.na(iso3c)) %>% # drop all locations not corresponding to countries (largely regions and super regions)
rename(Pop = val) %>%
mutate(Pop_sd = (upper-Pop)/2) %>%
select(!(upper:lower)) %>%
select(!(measure_id:measure_name)) # Noted that this dataset is missing Nauru, Palau, Saint Kitts and Nevis, Tuvalu and San Marino, which had to be taken from another dataset
UN_population_forecast <- read_csv("data/UN_world_population_prospects.csv") %>%  # Data taken from UN World Population Prospects 2024 using the medium scenario (https://population.un.org/wpp/downloads?folder=Standard%20Projections&group=Most%20used)
filter(iso3c %in% c("NRU","TUV", "PLW", "KNA", "SMR", "MCO"))%>%
filter (Year %in% c(2025, 2030, 2035, 2040, 2045, 2050)) %>%
select(iso3c, Year, Pop) %>%
mutate (Pop = as.double(Pop)) %>%
mutate (Pop = Pop * 1000) %>%
rename(year_id = Year)
population_forecast <- bind_rows(population_forecast, UN_population_forecast) %>%
select(!(location_id:location_name))
perio_prevalence_forecast <- read_csv("data/GBD_prev_perio.csv") %>%     # Data taken from GBD forecasts
filter(year_id %in% c(2025, 2030, 2035, 2040, 2045, 2050)) %>%
filter(age_group_name == "All Ages", sex == "Both") %>%
mutate(iso3c = countrycode(location_name, origin = "country.name", destination = "iso3c")) %>%   #matching with ISO code for country names
filter(!is.na(iso3c)) %>%
rename(Perio_prev = mean) %>%
mutate(Perio_prev_sd = (upper-Perio_prev)/2) %>%
select(!(upper:lower)) %>%
select(!(sex:age_group_name)) %>%
select(!(location_id:location_name))
edent_prevalence_forecast <- read_csv("data/GBD_prev_edent.csv") %>%     # Data taken from GBD forecasts
filter(year_id %in% c(2025, 2030, 2035, 2040, 2045, 2050)) %>%
filter(age_group_name == "All Ages", sex == "Both") %>%
mutate(iso3c = countrycode(location_name, origin = "country.name", destination = "iso3c")) %>%   #matching with ISO code for country names
filter(!is.na(iso3c)) %>%
rename(Edent_prev = mean) %>%
mutate(Edent_prev_sd = (upper-Edent_prev)/2) %>%
select(!(upper:lower)) %>%
select(!(sex:age_group_name)) %>%
select(!(location_id:location_name))
joined_list <- list(perio_prevalence_forecast, edent_prevalence_forecast, population_forecast)
joined_forecast <- reduce(joined_list, left_join, by = c("year_id", "iso3c"))
# ==============================================================================
# Creating datasets for each year, joining by iso3c, and adjusting procedure costs for medical inflation
# ==============================================================================
existing_input <- read_csv("data/combined_country_input.csv")
existing_input_stripped <- existing_input %>%
select(!(Pop:Perio_prev_sd)) %>%
mutate(Country = ifelse(Country == "Micronesia",             # Micronesia is the only country that is not captured by the countrycodes package
"Micronesia (Federated States of)",
Country),
iso3c = countrycode(Country, origin = "country.name", destination = "iso3c"))
# Prepare 2025 file, joining by iso3c
combined_country_input_2025 <-  joined_forecast %>%
filter(year_id ==2025) %>%
select(!(year_id)) %>%
right_join(existing_input_stripped) %>%
write_csv("data/combined_country_input_2025.csv")
# Regarding estimate for medical inflation, would refer to Dunn et al. (2016) (https://pmc.ncbi.nlm.nih.gov/articles/PMC5785315/)
# Based on CPI-U vs the Medical Care component of CPI, the medical care component has been broadly in line with real inflation
# In fact in 2021 and 2022 it was outstripped by overall CPI by 3-4%
# Therefore, no further adjustments were made for medical inflation
# Prepare 2030 file
combined_country_input_2030 <-  joined_forecast %>%
filter(year_id ==2030) %>%
select(!(year_id)) %>%
right_join(existing_input_stripped) %>%
write_csv("data/combined_country_input_2030.csv")
# Prepare 2035 file
combined_country_input_2035 <-  joined_forecast %>%
filter(year_id ==2035) %>%
select(!(year_id)) %>%
right_join(existing_input_stripped)  %>%
write_csv("data/combined_country_input_2035.csv")
# Prepare 2040 file
combined_country_input_2040 <-  joined_forecast %>%
filter(year_id ==2040) %>%
select(!(year_id)) %>%
right_join(existing_input_stripped) %>%
write_csv("data/combined_country_input_2040.csv")
# Prepare 2045 file
combined_country_input_2045 <-  joined_forecast %>%
filter(year_id ==2045) %>%
select(!(year_id)) %>%
right_join(existing_input_stripped) %>%
write_csv("data/combined_country_input_2045.csv")
# Prepare 2050 file
combined_country_input_2050 <-  joined_forecast %>%
filter(year_id ==2050) %>%
select(!(year_id)) %>%
right_join(existing_input_stripped) %>%
write_csv("data/combined_country_input_2050.csv")
final_df <- final_df %>%
mutate(across(all_of(procedures), ~ abs(.x))) %>%
mutate(across(all_of(procedures), ~ .x * 1.21))
base_df <- read_csv("./data/monte_carlo_input_from_rms.csv", col_types = cols())
base_df_dent_exp <- base_df %>%
select(iso3c, Dent_exp_usd)
overwrite_df <- read_csv("./data/country_input.csv", col_types = cols()) %>%
rename(iso3c = iso3, Dent_exppc_usd = "Dental Expenditure Per Capita") %>%
left_join(base_df_dent_exp)
known_country_list <- overwrite_df %>%
pull(iso3c)
final_df <- base_df %>%
filter(!iso3c %in% known_country_list) %>%
bind_rows(overwrite_df) %>%
select(-mu_log_prophy, -sigma_log_prophy, -log_GDP, -prophy_var, -Conversion)
# Procedure names of interest
procedures <- c(
"Prophy", "Consult_simple", "Consult_perio", "OPG", "PA", "RootDeb", "OHI",
"Extraction", "OFD", "GTR", "Single_implant", "Implant_surgery",
"Full_fixed", "Denture", "Denture_repair", "Maintenance_simp",
"Maintenance_perio"
final_df <- final_df %>%
# Procedure names of interest
procedures <- c(
"Prophy", "Consult_simple", "Consult_perio", "OPG", "PA", "RootDeb", "OHI",
"Extraction", "OFD", "GTR", "Single_implant", "Implant_surgery",
"Full_fixed", "Denture", "Denture_repair", "Maintenance_simp",
"Maintenance_perio"
)
final_df <- final_df %>%
mutate(across(all_of(procedures), ~ abs(.x))) %>%
mutate(across(all_of(procedures), ~ .x * 1.21))
procedures_sd <- paste0(procedures, "_sd")
base_df <- read_csv("./data/monte_carlo_input_from_rms.csv", col_types = cols())
base_df_dent_exp <- base_df %>%
select(iso3c, Dent_exp_usd)
overwrite_df <- read_csv("./data/country_input.csv", col_types = cols()) %>%
rename(iso3c = iso3, Dent_exppc_usd = "Dental Expenditure Per Capita") %>%
left_join(base_df_dent_exp)
known_country_list <- overwrite_df %>%
pull(iso3c)
final_df <- base_df %>%
filter(!iso3c %in% known_country_list) %>%
bind_rows(overwrite_df) %>%
select(-mu_log_prophy, -sigma_log_prophy, -log_GDP, -prophy_var, -Conversion)
# Procedure names of interest
procedures <- c(
"Prophy", "Consult_simple", "Consult_perio", "OPG", "PA", "RootDeb", "OHI",
"Extraction", "OFD", "GTR", "Single_implant", "Implant_surgery",
"Full_fixed", "Denture", "Denture_repair", "Maintenance_simp",
"Maintenance_perio"
)
procedures_sd <- paste0(procedures, "_sd")
final_df <- final_df %>%
mutate(across(all_of(procedures), ~ abs(.x))) %>%
mutate(across(all_of(procedures), ~ .x * 1.21)) %>%
mutate(across(all_of(procedures_sd), ~ .x * 1.21))
# Step 2: compute *_shape and *_rate columns explicitly
for (proc in procedures) {
mean_vec <- final_df[[proc]]
sd_vec   <- abs(final_df[[paste0(proc, "_sd")]])
var_vec  <- sd_vec^2
denom    <- ifelse(var_vec <= 0 | is.na(var_vec), NA_real_, var_vec)
final_df[[paste0(proc, "_shape")]] <- (mean_vec^2) / denom
final_df[[paste0(proc, "_rate")]]  <- mean_vec / denom
# safety for invalid values
final_df[[paste0(proc, "_shape")]][!is.finite(final_df[[paste0(proc, "_shape")]]) |
final_df[[paste0(proc, "_shape")]] <= 0] <- NA_real_
final_df[[paste0(proc, "_rate")]][!is.finite(final_df[[paste0(proc, "_rate")]]) |
final_df[[paste0(proc, "_rate")]] <= 0] <- NA_real_
}
write_csv(final_df, "./data/combined_country_input_for_analysis.csv") # for future data analysis
final_df_clean <- final_df %>%
dplyr::select(
-iso3c,
-Dent_exp_usd,
-Dent_exppc_usd,
-(GDP_per_capita_PPP_2021:gdp_ppp_lower),
-(Prophy:Maintenance_perio_sd)
)
# Save
write_csv(final_df_clean, "./data/combined_country_input.csv")
# ==============================================================================
# Extracting data from IHME population forecast, perio and edentulism prevalence data
# ==============================================================================
library(tidyverse)
library(countrycode)
population_forecast <- read_csv("data/IHME_population_forecast.csv") %>%     # Data taken from IHME (https://ghdx.healthdata.org/record/ihme-data/global-population-forecasts-2017-2100)
filter(scenario == 0, year_id %in% c(2025, 2030, 2035, 2040, 2045, 2050)) %>%
select(starts_with(c("location", "year", "measure", "val","upper","lower"))) %>%
mutate(iso3c = countrycode(location_name, origin = "country.name", destination = "iso3c")) %>%   #matching with ISO code for country names
filter(!is.na(iso3c)) %>% # drop all locations not corresponding to countries (largely regions and super regions)
rename(Pop = val) %>%
mutate(Pop_sd = (upper-Pop)/2) %>%
select(!(upper:lower)) %>%
select(!(measure_id:measure_name)) # Noted that this dataset is missing Nauru, Palau, Saint Kitts and Nevis, Tuvalu and San Marino, which had to be taken from another dataset
UN_population_forecast <- read_csv("data/UN_world_population_prospects.csv") %>%  # Data taken from UN World Population Prospects 2024 using the medium scenario (https://population.un.org/wpp/downloads?folder=Standard%20Projections&group=Most%20used)
filter(iso3c %in% c("NRU","TUV", "PLW", "KNA", "SMR", "MCO"))%>%
filter (Year %in% c(2025, 2030, 2035, 2040, 2045, 2050)) %>%
select(iso3c, Year, Pop) %>%
mutate (Pop = as.double(Pop)) %>%
mutate (Pop = Pop * 1000) %>%
rename(year_id = Year)
population_forecast <- bind_rows(population_forecast, UN_population_forecast) %>%
select(!(location_id:location_name))
perio_prevalence_forecast <- read_csv("data/GBD_prev_perio.csv") %>%     # Data taken from GBD forecasts
filter(year_id %in% c(2025, 2030, 2035, 2040, 2045, 2050)) %>%
filter(age_group_name == "All Ages", sex == "Both") %>%
mutate(iso3c = countrycode(location_name, origin = "country.name", destination = "iso3c")) %>%   #matching with ISO code for country names
filter(!is.na(iso3c)) %>%
rename(Perio_prev = mean) %>%
mutate(Perio_prev_sd = (upper-Perio_prev)/2) %>%
select(!(upper:lower)) %>%
select(!(sex:age_group_name)) %>%
select(!(location_id:location_name))
edent_prevalence_forecast <- read_csv("data/GBD_prev_edent.csv") %>%     # Data taken from GBD forecasts
filter(year_id %in% c(2025, 2030, 2035, 2040, 2045, 2050)) %>%
filter(age_group_name == "All Ages", sex == "Both") %>%
mutate(iso3c = countrycode(location_name, origin = "country.name", destination = "iso3c")) %>%   #matching with ISO code for country names
filter(!is.na(iso3c)) %>%
rename(Edent_prev = mean) %>%
mutate(Edent_prev_sd = (upper-Edent_prev)/2) %>%
select(!(upper:lower)) %>%
select(!(sex:age_group_name)) %>%
select(!(location_id:location_name))
joined_list <- list(perio_prevalence_forecast, edent_prevalence_forecast, population_forecast)
joined_forecast <- reduce(joined_list, left_join, by = c("year_id", "iso3c"))
# ==============================================================================
# Creating datasets for each year, joining by iso3c, and adjusting procedure costs for medical inflation
# ==============================================================================
existing_input <- read_csv("data/combined_country_input.csv")
existing_input_stripped <- existing_input %>%
select(!(Pop:Perio_prev_sd)) %>%
mutate(Country = ifelse(Country == "Micronesia",             # Micronesia is the only country that is not captured by the countrycodes package
"Micronesia (Federated States of)",
Country),
iso3c = countrycode(Country, origin = "country.name", destination = "iso3c"))
# Prepare 2025 file, joining by iso3c
combined_country_input_2025 <-  joined_forecast %>%
filter(year_id ==2025) %>%
select(!(year_id)) %>%
right_join(existing_input_stripped) %>%
write_csv("data/combined_country_input_2025.csv")
# Regarding estimate for medical inflation, would refer to Dunn et al. (2016) (https://pmc.ncbi.nlm.nih.gov/articles/PMC5785315/)
# Based on CPI-U vs the Medical Care component of CPI, the medical care component has been broadly in line with real inflation
# In fact in 2021 and 2022 it was outstripped by overall CPI by 3-4%
# Therefore, no further adjustments were made for medical inflation
# Prepare 2030 file
combined_country_input_2030 <-  joined_forecast %>%
filter(year_id ==2030) %>%
select(!(year_id)) %>%
right_join(existing_input_stripped) %>%
write_csv("data/combined_country_input_2030.csv")
# Prepare 2035 file
combined_country_input_2035 <-  joined_forecast %>%
filter(year_id ==2035) %>%
select(!(year_id)) %>%
right_join(existing_input_stripped)  %>%
write_csv("data/combined_country_input_2035.csv")
# Prepare 2040 file
combined_country_input_2040 <-  joined_forecast %>%
filter(year_id ==2040) %>%
select(!(year_id)) %>%
right_join(existing_input_stripped) %>%
write_csv("data/combined_country_input_2040.csv")
# Prepare 2045 file
combined_country_input_2045 <-  joined_forecast %>%
filter(year_id ==2045) %>%
select(!(year_id)) %>%
right_join(existing_input_stripped) %>%
write_csv("data/combined_country_input_2045.csv")
# Prepare 2050 file
combined_country_input_2050 <-  joined_forecast %>%
filter(year_id ==2050) %>%
select(!(year_id)) %>%
right_join(existing_input_stripped) %>%
write_csv("data/combined_country_input_2050.csv")
