mean()
tibble(
base_procedure = base_proc,
base_cv = base_cv,
avg_sd_ratio = avg_sd_ratio
)
})
library(tidyverse)
# These are the candidates for the base procedure - simple, commonly used procedures with less variance
base_candidates <- c("Extraction", "Consult_simple", "Prophy", "OPG", "PA", "Maintenance_simp")
base_procedure_df <- read.csv("data/country_input.csv") %>%
filter(Country != "United Kingdom")
all_columns <- colnames(base_procedure_df)
procedure_names <- all_columns[!grepl("_sd$", all_columns)]
procedure_names <- setdiff(
procedure_names,
c("Country", "Perio_prev", "Edent_prev", "Pop", "Conversion", "Dental Expenditure Per Capita")
)
# Main loop
results <- purrr::map(base_candidates, function(base_proc) {
base_costs <- base_procedure_df[[base_proc]]
base_cv <- sd(base_costs) / mean(base_costs)
others <- setdiff(procedure_names, base_proc)
ratio_df <- base_procedure_df %>%
dplyr::select(all_of(others)) %>%
dplyr::mutate(across(everything(), ~ .x / base_costs))
ratio_stats <- ratio_df %>%
dplyr::summarise(across(everything(), list(mean_ratio = mean, sd_ratio = sd)))
avg_sd_ratio <- ratio_stats %>%
dplyr::select(ends_with("sd_ratio")) %>%
unlist() %>%
mean()
tibble(
base_procedure = base_proc,
base_cv = base_cv,
avg_sd_ratio = avg_sd_ratio
)
})
base_procedure_df <- read.csv("data/known_countries.csv") %>%
filter(Country != "United Kingdom")
base_procedure_df <- read.csv("output/known_countries.csv") %>%
filter(Country != "United Kingdom")
base_procedure_df <- read.csv("outputs/known_countries.csv") %>%
filter(Country != "United Kingdom")
all_columns <- colnames(base_procedure_df)
procedure_names <- all_columns[!grepl("_sd$", all_columns)]
procedure_names <- setdiff(
procedure_names,
c("Country", "Perio_prev", "Edent_prev", "Pop", "Conversion", "Dental Expenditure Per Capita")
)
# Main loop
results <- purrr::map(base_candidates, function(base_proc) {
base_costs <- base_procedure_df[[base_proc]]
base_cv <- sd(base_costs) / mean(base_costs)
others <- setdiff(procedure_names, base_proc)
ratio_df <- base_procedure_df %>%
dplyr::select(all_of(others)) %>%
dplyr::mutate(across(everything(), ~ .x / base_costs))
ratio_stats <- ratio_df %>%
dplyr::summarise(across(everything(), list(mean_ratio = mean, sd_ratio = sd)))
avg_sd_ratio <- ratio_stats %>%
dplyr::select(ends_with("sd_ratio")) %>%
unlist() %>%
mean()
tibble(
base_procedure = base_proc,
base_cv = base_cv,
avg_sd_ratio = avg_sd_ratio
)
})
# These are the candidates for the base procedure - simple, commonly used procedures with less variance
base_candidates <- c("Extraction", "Consult_simple", "Prophy", "OPG", "PA", "Maintenance_simp")
library(tidyverse)
# These are the candidates for the base procedure - simple, commonly used procedures with less variance
base_candidates <- c("Extraction", "Consult_simple", "Prophy", "OPG", "PA", "Maintenance_simp")
base_procedure_df <- read.csv("outputs/known_countries.csv") %>%
filter(Country != "United Kingdom")
all_columns <- colnames(base_procedure_df)
procedure_names <- all_columns[!grepl("_sd$", all_columns)]
procedure_names <- setdiff(
procedure_names,
c("Country", "Perio_prev", "Edent_prev", "Pop", "Conversion", "Dental Expenditure Per Capita")
)
# Main loop
results <- purrr::map(base_candidates, function(base_proc) {
base_costs <- base_procedure_df[[base_proc]]
base_cv <- sd(base_costs) / mean(base_costs)
others <- setdiff(procedure_names, base_proc)
ratio_df <- base_procedure_df %>%
dplyr::select(all_of(others)) %>%
dplyr::mutate(across(everything(), ~ .x / base_costs))
ratio_stats <- ratio_df %>%
dplyr::summarise(across(everything(), list(mean_ratio = mean, sd_ratio = sd)))
avg_sd_ratio <- ratio_stats %>%
dplyr::select(ends_with("sd_ratio")) %>%
unlist() %>%
mean()
tibble(
base_procedure = base_proc,
base_cv = base_cv,
avg_sd_ratio = avg_sd_ratio
)
})
base_procedure_df <- read.csv("outputs/known_countries.csv") %>%
filter(Country != "United Kingdom")
all_columns <- colnames(base_procedure_df)
procedure_names <- all_columns[!grepl("_sd$", all_columns)]
procedure_names <- setdiff(
procedure_names,
c("Country", "Perio_prev", "Edent_prev", "Pop", "Conversion", "Dental Expenditure Per Capita")
)
# Main loop
results <- purrr::map(base_candidates, function(base_proc) {
base_costs <- base_procedure_df[[base_proc]]
base_cv <- sd(base_costs) / mean(base_costs)
others <- setdiff(procedure_names, base_proc)
ratio_df <- base_procedure_df %>%
dplyr::select(all_of(others)) %>%
dplyr::mutate(across(everything(), ~ .x / base_costs))
ratio_stats <- ratio_df %>%
dplyr::summarise(across(everything(), list(mean_ratio = mean, sd_ratio = sd)))
avg_sd_ratio <- ratio_stats %>%
dplyr::select(ends_with("sd_ratio")) %>%
unlist() %>%
mean()
tibble(
base_procedure = base_proc,
base_cv = base_cv,
avg_sd_ratio = avg_sd_ratio
)
})
results_df <- dplyr::bind_rows(results)
print(results_df)
base_procedure_df <- read.csv("data/country_inputs.csv") %>%
filter(Country != "United Kingdom")
all_columns <- colnames(base_procedure_df)
procedure_names <- all_columns[!grepl("_sd$", all_columns)]
procedure_names <- setdiff(
procedure_names,
c("Country", "Perio_prev", "Edent_prev", "Pop", "Conversion", "Dental Expenditure Per Capita")
)
base_procedure_df <- read.csv("data/country_input.csv") %>%
filter(Country != "United Kingdom")
all_columns <- colnames(base_procedure_df)
procedure_names <- all_columns[!grepl("_sd$", all_columns)]
procedure_names <- setdiff(
procedure_names,
c("Country", "Perio_prev", "Edent_prev", "Pop", "Conversion", "Dental Expenditure Per Capita")
)
# Main loop
results <- purrr::map(base_candidates, function(base_proc) {
base_costs <- base_procedure_df[[base_proc]]
base_cv <- sd(base_costs) / mean(base_costs)
others <- setdiff(procedure_names, base_proc)
ratio_df <- base_procedure_df %>%
dplyr::select(all_of(others)) %>%
dplyr::mutate(across(everything(), ~ .x / base_costs))
ratio_stats <- ratio_df %>%
dplyr::summarise(across(everything(), list(mean_ratio = mean, sd_ratio = sd)))
avg_sd_ratio <- ratio_stats %>%
dplyr::select(ends_with("sd_ratio")) %>%
unlist() %>%
mean()
tibble(
base_procedure = base_proc,
base_cv = base_cv,
avg_sd_ratio = avg_sd_ratio
)
})
# Load packages
library(tidyverse)
library(countrycode)
gdp_per_capita <- read_csv("data/GBD_gdp_per_capita.csv") %>%  # Taken from https://ghdx.healthdata.org/record/ihme-data/global-gdp-per-capita-1960-2050-fgh-2023
filter(level == "Country", year == 2021) %>%
select(location_name, iso3, gdp_ppp_mean, gdp_ppp_upper, gdp_ppp_lower) %>%
rename (GDP_per_capita_PPP_2021 = gdp_ppp_mean)
population <- read_csv("data/GBD_population_2021.csv") %>% # Taken from https://vizhub.healthdata.org/gbd-results/
select(location_name, val, upper, lower) %>%
rename(Pop = val) %>%
mutate(Pop_sd = (upper-Pop)/2) %>%
select(-upper, -lower)
prevalence <- read_csv("data/GBD_prev_2021.csv") %>%      # Taken from https://vizhub.healthdata.org/gbd-results/
select(location_name, cause_name, val, upper, lower)
edent <- prevalence %>%
filter(cause_name == "Edentulism") %>%
rename(Edent_prev = val) %>%
mutate(Edent_prev_sd = (upper - Edent_prev)/2) %>%
select(-upper, -lower, - cause_name)
perio <- prevalence %>%
filter(cause_name == "Periodontal diseases") %>%
rename(Perio_prev = val) %>%
mutate(Perio_prev_sd = (upper - Perio_prev)/2) %>%
select(-upper, -lower, - cause_name)
full_dataset <- population %>%
left_join(edent, by = "location_name") %>%
left_join(perio, by = "location_name") %>%
left_join(gdp_per_capita, by = "location_name")
# write_csv(gdp_per_capita, "data/gdp_ppp_manually_cleaned.csv")
# write_csv(full_dataset, "data/gbd_prevalence_population.csv")
country_input <- read_csv("data/country_input.csv") %>%   # To ensure no transcription mistakes as this smaller dataset had been transcribed by hand previously
select(-(Perio_prev:Pop_sd)) %>%
left_join(full_dataset, by = c("Country" = "location_name"))
write_csv(country_input, "data/country_input.csv")
dental_expenditure <- read_csv("./data/gbd_dental_expenditure.csv") %>%
mutate(Country = ifelse(Country == "Micronesia",             # Micronesia is the only country that is not captured by the countrycodes package
"Micronesia (Federated States of)",
Country)) %>%
mutate(iso3c = countrycode(Country, origin = "country.name", destination = "iso3c")) %>%
select(-Country) %>%
full_join(full_dataset, by = c("iso3c" = "iso3")) %>%
rename (Country = location_name)
write_csv(dental_expenditure, "data/2021_prevalence_pop_dentexp_GDP.csv") # For use as an input in Procedure Cost Extrapolation Ratio R file
country_input <- read_csv("data/country_input.csv")
View(country_input)
country_input <- read_csv("data/country_input.csv") %>%   # To ensure no transcription mistakes as this smaller dataset had been transcribed by hand previously
select(-(Perio_prev:Pop_sd)) %>%
select(-(Pop.x:gdp_ppp_lower.y.y))
country_input <- read_csv("data/country_input.csv") %>%   # To ensure no transcription mistakes as this smaller dataset had been transcribed by hand previously
select(-(Perio_prev:Pop_sd)) %>%
select(-(Pop.x:gdp_ppp_lower.y.y)) %>%
left_join(full_dataset, by = c("Country" = "location_name"))
write_csv(country_input, "data/country_input.csv")
write_csv(country_input, "data/country_input.csv")
library(tidyverse)
# These are the candidates for the base procedure - simple, commonly used procedures with less variance
base_candidates <- c("Extraction", "Consult_simple", "Prophy", "OPG", "PA", "Maintenance_simp")
base_procedure_df <- read.csv("data/country_input.csv") %>%
filter(Country != "United Kingdom") %>%
select(-iso3)
all_columns <- colnames(base_procedure_df)
procedure_names <- all_columns[!grepl("_sd$", all_columns)]
procedure_names <- setdiff(
procedure_names,
c("Country", "Perio_prev", "Edent_prev", "Pop", "Conversion", "Dental Expenditure Per Capita")
)
# Main loop
results <- purrr::map(base_candidates, function(base_proc) {
base_costs <- base_procedure_df[[base_proc]]
base_cv <- sd(base_costs) / mean(base_costs)
others <- setdiff(procedure_names, base_proc)
ratio_df <- base_procedure_df %>%
dplyr::select(all_of(others)) %>%
dplyr::mutate(across(everything(), ~ .x / base_costs))
ratio_stats <- ratio_df %>%
dplyr::summarise(across(everything(), list(mean_ratio = mean, sd_ratio = sd)))
avg_sd_ratio <- ratio_stats %>%
dplyr::select(ends_with("sd_ratio")) %>%
unlist() %>%
mean()
tibble(
base_procedure = base_proc,
base_cv = base_cv,
avg_sd_ratio = avg_sd_ratio
)
})
results_df <- dplyr::bind_rows(results)
print(results_df)
library(rms)
library(performance)
library(see)
library(fuzzyjoin)
base_procedure_df <- read.csv("data/country_input.csv") %>%
filter(Country != "United Kingdom")
# -------------------------------
# 1️⃣ Fit GDP → log(Prophy)
# -------------------------------
base_procedure_df <- base_procedure_df %>%
mutate(
log_GDP = log(GDP_per_capita_PPP_2021),
log_prophy = log(Prophy)
)
dd <- datadist(base_procedure_df)
options(datadist = "dd")
model_prophy <- ols(log_prophy ~ log_GDP, data = base_procedure_df)
# Diagnostics for Prophy
print(model_performance(model_prophy))
prophy_diag_plot <- plot(check_model(model_prophy)) + ggtitle("Diagnostics: log(Prophy) ~ log(GDP)")
ggsave(filename = "output_regression_diagnostics/Prophy_model_diagnostics.pdf", plot = prophy_diag_plot, width = 8, height = 6)
# -------------------------------
# 2️⃣ Fit Prophy → each Procedure (original scale)
# -------------------------------
proc_means <- c(
"Consult_simple", "Consult_perio", "OPG", "PA", "RootDeb",
"OHI", "Extraction", "OFD", "GTR", "Single_implant", "Implant_surgery",
"Full_fixed", "Denture", "Denture_repair", "Maintenance_simp", "Maintenance_perio"
)
proc_models <- map(proc_means, function(proc) {
mod <- ols(as.formula(paste0(proc, " ~ Prophy")), data = base_procedure_df)
perf <- model_performance(mod)
print(perf)
diag_plot <- plot(check_model(mod)) + ggtitle(paste("Diagnostics:", proc, "~ Prophy"))
ggsave(filename = paste0("output_regression_diagnostics/", proc, "_diagnostics.pdf"), plot = diag_plot, width = 8, height = 6)
mod
})
names(proc_models) <- proc_means
predict_countries <- read_csv("data/2021_prevalence_pop_dentexp_GDP.csv")
predict_countries <- predict_countries %>%
mutate(log_GDP = log(GDP_per_capita_PPP_2021)) %>%
dplyr::select(-Country_df2) %>%
rename(Country = Country_df1)
predict_countries <- predict_countries %>%
mutate(log_GDP = log(GDP_per_capita_PPP_2021))
predict_countries <- read_csv("data/2021_prevalence_pop_dentexp_GDP.csv") %>%
mutate(log_GDP = log(GDP_per_capita_PPP_2021))
# Predict log(Prophy) + SE
log_prophy_preds <- predict(model_prophy, predict_countries, conf.int = 0.95)
predict_countries <- predict_countries %>%
mutate(
mu_log_prophy = log_prophy_preds$linear.predictors,
sigma_log_prophy = (log_prophy_preds$upper - log_prophy_preds$lower) / (2 * qnorm(0.975)),
# Log-normal back-transform
prophy_mean = exp(mu_log_prophy + 0.5 * sigma_log_prophy^2),
prophy_var = (exp(sigma_log_prophy^2) - 1) * exp(2 * mu_log_prophy + sigma_log_prophy^2),
prophy_sd = sqrt(prophy_var)
)
predict_proc <- function(proc_name, model, prophy_mean, prophy_var) {
beta <- coef(model)
beta0 <- beta[1]
beta1 <- beta[2]
resid_sd <- model$stats["Sigma"]
# Predicted mean:
pred_mean <- beta0 + beta1 * prophy_mean
# Delta Method variance:
pred_var <- (beta1^2) * prophy_var + resid_sd^2
tibble(
procedure = proc_name,
Predicted_Cost = pred_mean,
SD = sqrt(pred_var)
)
}
# Do this for each procedure for each row
proc_preds <- predict_countries %>%
mutate(procs = pmap(
list(prophy_mean, prophy_var),
function(pm, pv) {
map_dfr(names(proc_models), ~ predict_proc(.x, proc_models[[.x]], pm, pv))
}
)) %>%
unnest(procs)
wide_countries <- proc_preds %>%
pivot_wider(
names_from = procedure,
values_from = c(Predicted_Cost, SD),
names_glue = "{procedure}{ifelse(.value == 'SD', '_sd', '')}"
) %>%
rename(Prophy = prophy_mean, Prophy_sd = prophy_sd)
# Write to CSV
write_csv(wide_countries, "./data/predictions_from_rms.csv")
View(wide_countries)
View(wide_countries)
wide_countries <- proc_preds %>%
pivot_wider(
names_from = procedure,
values_from = c(Predicted_Cost, SD),
names_glue = "{procedure}{ifelse(.value == 'SD', '_sd', '')}"
) %>%
rename(Prophy = prophy_mean, Prophy_sd = prophy_sd)
# Write to CSV
write_csv(wide_countries, "./data/monte_carlo_input_from_rms.csv")
# Write to CSV
write_csv(wide_countries, "./data/monte_carlo_input_from_rms.csv")
# Load both CSVs
overwrite_df <- read_csv("./data/country_input.csv", col_types = cols())
base_df <- read_csv("./data/monte_carlo_input_from_rms.csv", col_types = cols())
# Combine: overwrite countries
combined_df <- base_df %>%
filter(!Country %in% overwrite_df$Country) %>%
bind_rows(overwrite_df) %>%
arrange(Country)
# Join back to base_df to restore missing cols
final_df <- combined_df %>%
left_join(base_df, by = "Country", suffix = c("", "_base"))
# Identify which columns are the base fallback
base_cols <- names(final_df)[grepl("_base$", names(final_df))]
# Coalesce each pair: new value if present, else fallback
for (col_base in base_cols) {
col_orig <- sub("_base$", "", col_base)
final_df[[col_orig]] <- coalesce(final_df[[col_orig]], final_df[[col_base]])
}
# Drop the _base helper columns
final_df <- final_df %>%
dplyr:::select(-all_of(base_cols))
final_df_clean <- final_df %>%
dplyr::select(
-Pop_sd,
-Dent_exp_usd,
-Dent_exppc_usd,
-GDP_per_capita_PPP_2021,
-Conversion,
-`Dental Expenditure Per Capita`
)
View(final_df_clean)
View(base_df)
View(overwrite_df)
known_country_list <- overwrite_df %>%
pull(iso3)
final_df <- base_df %>%
filter(!iso3c %in% known_country_list)
final_df <- base_df %>%
filter(!iso3c %in% known_country_list) %>%
bind_rows(overwrite_df)
View(final_df)
# Load both CSVs
overwrite_df <- read_csv("./data/country_input.csv", col_types = cols()) %>%
rename(iso3c = iso3)
base_df <- read_csv("./data/monte_carlo_input_from_rms.csv", col_types = cols())
known_country_list <- overwrite_df %>%
pull(iso3c)
final_df <- base_df %>%
filter(!iso3c %in% known_country_list) %>%
bind_rows(overwrite_df)
View(country_input)
# Load both CSVs
overwrite_df <- read_csv("./data/country_input.csv", col_types = cols()) %>%
rename(iso3c = iso3, Dent_exppc_usd)
# Load both CSVs
overwrite_df <- read_csv("./data/country_input.csv", col_types = cols()) %>%
rename(iso3c = iso3, Dent_exppc_usd = "Dental Expenditure Per Capita")
base_df <- read_csv("./data/monte_carlo_input_from_rms.csv", col_types = cols())
known_country_list <- overwrite_df %>%
pull(iso3c)
final_df <- base_df %>%
filter(!iso3c %in% known_country_list) %>%
bind_rows(overwrite_df)
overwrite_df <- read_csv("./data/country_input.csv", col_types = cols()) %>%
rename(iso3c = iso3, Dent_exppc_usd = "Dental Expenditure Per Capita") %>%
left_join(base_df)
View(overwrite_df)
View(base_df)
# Load both CSVs
base_df <- read_csv("./data/monte_carlo_input_from_rms.csv", col_types = cols())
overwrite_df <- read_csv("./data/country_input.csv", col_types = cols()) %>%
rename(iso3c = iso3, Dent_exppc_usd = "Dental Expenditure Per Capita") %>%
left_join(base_df)
base_df_dent_exp <- base_df %>%
select(iso3c, Dent_exp_usd)
overwrite_df <- read_csv("./data/country_input.csv", col_types = cols()) %>%
rename(iso3c = iso3, Dent_exppc_usd = "Dental Expenditure Per Capita") %>%
left_join(base_df_dent_exp)
known_country_list <- overwrite_df %>%
pull(iso3c)
final_df <- base_df %>%
filter(!iso3c %in% known_country_list) %>%
bind_rows(overwrite_df)
View(final_df)
View(final_df)
final_df <- base_df %>%
filter(!iso3c %in% known_country_list) %>%
bind_rows(overwrite_df) %>%
select(-mu_log_prophy, -sigma_log_prophy, -log_GDP, -prophy_var)
final_df <- base_df %>%
filter(!iso3c %in% known_country_list) %>%
bind_rows(overwrite_df) %>%
select(-mu_log_prophy, -sigma_log_prophy, -log_GDP)
final_df <- base_df %>%
filter(!iso3c %in% known_country_list) %>%
bind_rows(overwrite_df) %>%
select(-mu_log_prophy, -sigma_log_prophy, -log_GDP, -prophy_var)
final_df_clean <- final_df %>%
dplyr::select(
-iso3c,
-Dent_exp_usd,
-Dent_exppc_usd,
-(GDP_per_capita_PPP_2021:gdp_ppp_lower),
-Conversion
)
# Save
write_csv(final_df_clean, "./data/combined_country_input.csv")
# ==============================================================================
# Cost Model Function — Optimised Version with Cleanup
# ==============================================================================
source("./99_functions.R")
# ============================================================================
# Load packages
# ============================================================================
library(tidyverse) # DPLYR IS PART OF TIDYVERSE - NO NEED TO CALL BOTH
library(MCMCpack)
# ROBIN NOTE - MOVED THE MAIN FUNCTION TO 99_functions.R FILE AND
#   CLEANING/COMBINATION STEP TO PROCEDURE COST FILE TO MAKE IT EASIER TO DIGEST
# ==============================================================================
# Calling the function
# ==============================================================================
# Example file paths (adjust if needed)
countries_path <- "./data/combined_country_input.csv"
procedure_lookup_high_path <- "./data/procedure_lookup.csv"
procedure_lookup_mid_path <- "./data/procedure_lookup.csv"
#  procedure_lookup_high_path <- "./data/procedure_lookup_increased_maintenance.csv"   #for various scenarios
#  procedure_lookup_mid_path  <- "./data/procedure_lookup_increased_maintenance.csv"
procedure_lookup_low_path <- "./data/procedure_lookup_low_scenario.csv"
#  procedure_lookup_low_path  <- "./data/procedure_lookup_low_scenario_increased_maintenance.csv"
tx_split_high_path <- "./data/tx_split.csv"
tx_split_mid_path <- "./data/tx_split_mid_scenario.csv"
tx_split_low_path <- "./data/tx_split_low_scenario.csv"
severity_split_path <- "./data/severity_split.csv"
# Where to write outputs
output_dir <- "outputs"
n_sims = 3000
# Call the new scenario runner
run_cost_model_scenarios(
countries_path = countries_path,
procedure_lookup_high_path = procedure_lookup_high_path,
procedure_lookup_mid_path = procedure_lookup_mid_path,
procedure_lookup_low_path = procedure_lookup_low_path,
tx_split_high_path = tx_split_high_path,
tx_split_mid_path = tx_split_mid_path,
tx_split_low_path = tx_split_low_path,
severity_split_path = severity_split_path,
n_sims = n_sims,
output_dir = output_dir,
scenarios = c("low", "mid", "high"), # same as before
slice_size = 999
)
